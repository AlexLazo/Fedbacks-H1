import pandas as pd
from datetime import datetime, timedelta
import os

def create_disciplinary_templates():
    """
    Crea plantillas de documentos disciplinarios para diferentes niveles de incumplimiento
    """
    print("üìã CREANDO PLANTILLAS DISCIPLINARIAS...")
    
    # Plantilla para Nivel 1 - Llamada de Atenci√≥n Verbal
    nivel1_template = {
        'Documento': 'ACTA DE LLAMADA DE ATENCI√ìN VERBAL',
        'Nivel': 'NIVEL 1',
        'Fecha': '{fecha}',
        'Ruta': '{ruta}',
        'Conductor': '{conductor}',
        'Motivo': 'Incumplimiento en la realizaci√≥n de Feedback semanal',
        'Descripcion': 'El conductor de la ruta {ruta} no realiz√≥ el feedback correspondiente en el per√≠odo {periodo}.',
        'Accion': 'Se realiza llamada de atenci√≥n verbal sobre la importancia de cumplir con los feedbacks semanales.',
        'Compromiso': 'El conductor se compromete a realizar todos los feedbacks en tiempo y forma.',
        'Supervisor': '{supervisor}',
        'Firma_Conductor': '_____________________',
        'Firma_Supervisor': '_____________________',
        'Observaciones': ''
    }
    
    # Plantilla para Nivel 2 - Amonestaci√≥n Escrita
    nivel2_template = {
        'Documento': 'AMONESTACI√ìN ESCRITA',
        'Nivel': 'NIVEL 2',
        'Fecha': '{fecha}',
        'Ruta': '{ruta}',
        'Conductor': '{conductor}',
        'Motivo': 'Segundo incumplimiento en la realizaci√≥n de Feedback semanal',
        'Descripcion': 'El conductor de la ruta {ruta} ha incumplido por segunda vez con la realizaci√≥n del feedback semanal.',
        'Accion': 'Se emite amonestaci√≥n escrita y se archiva en expediente personal.',
        'Consecuencias': 'El pr√≥ximo incumplimiento resultar√° en suspensi√≥n de un d√≠a sin goce de sueldo.',
        'Supervisor': '{supervisor}',
        'Firma_Conductor': '_____________________',
        'Firma_Supervisor': '_____________________',
        'Firma_RRHH': '_____________________',
        'Observaciones': ''
    }
    
    # Plantilla para Nivel 3 - Suspensi√≥n
    nivel3_template = {
        'Documento': 'ACTA DE SUSPENSI√ìN',
        'Nivel': 'NIVEL 3',
        'Fecha': '{fecha}',
        'Ruta': '{ruta}',
        'Conductor': '{conductor}',
        'Motivo': 'Tercer incumplimiento en la realizaci√≥n de Feedback semanal',
        'Descripcion': 'El conductor de la ruta {ruta} ha incumplido por tercera vez con la realizaci√≥n del feedback semanal.',
        'Accion': 'Suspensi√≥n de un (1) d√≠a sin goce de sueldo.',
        'Fecha_Suspension': '{fecha_suspension}',
        'Fecha_Reintegro': '{fecha_reintegro}',
        'Consecuencias': 'El pr√≥ximo incumplimiento ser√° evaluado para suspensi√≥n extendida o medidas adicionales.',
        'Supervisor': '{supervisor}',
        'Gerente': '{gerente}',
        'Firma_Conductor': '_____________________',
        'Firma_Supervisor': '_____________________',
        'Firma_Gerente': '_____________________',
        'Firma_RRHH': '_____________________',
        'Observaciones': ''
    }
    
    # Plantilla para Nivel 4 - Evaluaci√≥n Extendida
    nivel4_template = {
        'Documento': 'EVALUACI√ìN PARA MEDIDAS DISCIPLINARIAS EXTENDIDAS',
        'Nivel': 'NIVEL 4',
        'Fecha': '{fecha}',
        'Ruta': '{ruta}',
        'Conductor': '{conductor}',
        'Motivo': 'Cuarto incumplimiento en la realizaci√≥n de Feedback semanal',
        'Descripcion': 'El conductor de la ruta {ruta} ha incumplido repetidamente con la realizaci√≥n del feedback semanal.',
        'Historial': 'Llamada atenci√≥n verbal, amonestaci√≥n escrita, suspensi√≥n de 1 d√≠a.',
        'Evaluacion': 'Se requiere evaluaci√≥n por comit√© disciplinario para determinar medidas adicionales.',
        'Opciones': [
            'Suspensi√≥n extendida (3-5 d√≠as)',
            'Capacitaci√≥n obligatoria',
            'Cambio de ruta',
            'Otras medidas seg√∫n evaluaci√≥n'
        ],
        'Comite': [
            'Gerente CD Soyapango',
            'Jefe de Distribuci√≥n',
            'Coordinador de Distribuci√≥n',
            'Recursos Humanos'
        ],
        'Fecha_Evaluacion': '{fecha_evaluacion}',
        'Decision': '___________________',
        'Firma_Comite': '_____________________',
        'Observaciones': ''
    }
    
    return {
        'Nivel_1': nivel1_template,
        'Nivel_2': nivel2_template,
        'Nivel_3': nivel3_template,
        'Nivel_4': nivel4_template
    }

def create_tracking_system():
    """
    Crea sistema de seguimiento de acciones disciplinarias
    """
    tracking_data = [
        {
            'Campo': 'ID_Accion',
            'Descripcion': 'Identificador √∫nico de la acci√≥n disciplinaria',
            'Tipo': 'Autoincremento',
            'Ejemplo': 'DISC-2024-001'
        },
        {
            'Campo': 'Fecha_Accion',
            'Descripcion': 'Fecha en que se ejecut√≥ la acci√≥n',
            'Tipo': 'Fecha',
            'Ejemplo': '2024-06-19'
        },
        {
            'Campo': 'Ruta',
            'Descripcion': 'C√≥digo de la ruta involucrada',
            'Tipo': 'Texto',
            'Ejemplo': 'R001'
        },
        {
            'Campo': 'Conductor',
            'Descripcion': 'Nombre del conductor',
            'Tipo': 'Texto',
            'Ejemplo': 'Juan P√©rez'
        },
        {
            'Campo': 'Nivel_Consecuencia',
            'Descripcion': 'Nivel de la consecuencia aplicada',
            'Tipo': 'Lista',
            'Ejemplo': 'NIVEL 1, NIVEL 2, NIVEL 3, NIVEL 4'
        },
        {
            'Campo': 'Tipo_Accion',
            'Descripcion': 'Tipo espec√≠fico de acci√≥n tomada',
            'Tipo': 'Lista',
            'Ejemplo': 'Verbal, Escrita, Suspensi√≥n, Evaluaci√≥n'
        },
        {
            'Campo': 'Responsable_Ejecucion',
            'Descripcion': 'Quien ejecut√≥ la acci√≥n',
            'Tipo': 'Texto',
            'Ejemplo': '√ìscar Cuellar'
        },
        {
            'Campo': 'Estado',
            'Descripcion': 'Estado actual de la acci√≥n',
            'Tipo': 'Lista',
            'Ejemplo': 'Pendiente, Ejecutada, Documentada'
        },
        {
            'Campo': 'Evidencia_Documento',
            'Descripcion': 'Referencia al documento de evidencia',
            'Tipo': 'Texto',
            'Ejemplo': 'AMON-R001-20240619.pdf'
        },
        {
            'Campo': 'Fecha_Seguimiento',
            'Descripcion': 'Fecha de pr√≥ximo seguimiento',
            'Tipo': 'Fecha',
            'Ejemplo': '2024-06-26'
        },
        {
            'Campo': 'Observaciones',
            'Descripcion': 'Notas adicionales sobre la acci√≥n',
            'Tipo': 'Texto largo',
            'Ejemplo': 'Conductor mostr√≥ disposici√≥n a mejorar'
        }
    ]
    
    tracking_df = pd.DataFrame(tracking_data)
    return tracking_df

def create_escalation_matrix():
    """
    Crea matriz de escalamiento para diferentes escenarios
    """
    escalation_data = [
        {
            'Incumplimientos': 1,
            'Nivel': 'NIVEL 1',
            'Accion': 'Llamada de Atenci√≥n Verbal',
            'Responsable': 'Supervisor de Ruta',
            'Tiempo_Limite': '24 horas',
            'Documentacion': 'Acta verbal',
            'Archivo': 'No'
        },
        {
            'Incumplimientos': 2,
            'Nivel': 'NIVEL 2',
            'Accion': 'Amonestaci√≥n Escrita',
            'Responsable': 'Coordinador de Distribuci√≥n',
            'Tiempo_Limite': '48 horas',
            'Documentacion': 'Memor√°ndum escrito',
            'Archivo': 'Expediente personal'
        },
        {
            'Incumplimientos': 3,
            'Nivel': 'NIVEL 3',
            'Accion': 'Suspensi√≥n 1 d√≠a',
            'Responsable': 'Jefe de Distribuci√≥n',
            'Tiempo_Limite': '72 horas',
            'Documentacion': 'Acta de suspensi√≥n',
            'Archivo': 'Expediente + RRHH'
        },
        {
            'Incumplimientos': '4+',
            'Nivel': 'NIVEL 4',
            'Accion': 'Evaluaci√≥n por Comit√©',
            'Responsable': 'Gerente CD + Comit√©',
            'Tiempo_Limite': '1 semana',
            'Documentacion': 'Acta de evaluaci√≥n',
            'Archivo': 'Expediente + RRHH + Gerencia'
        }
    ]
    
    escalation_df = pd.DataFrame(escalation_data)
    return escalation_df

def generate_comprehensive_consequence_system():
    """
    Genera el sistema completo de consecuencias con todas las plantillas
    """
    print("\nüèóÔ∏è  GENERANDO SISTEMA COMPLETO DE CONSECUENCIAS...")
    
    # Crear plantillas
    templates = create_disciplinary_templates()
    
    # Crear sistema de seguimiento
    tracking_system = create_tracking_system()
    
    # Crear matriz de escalamiento
    escalation_matrix = create_escalation_matrix()
    
    # Crear archivo Excel comprehensivo
    filename = f"Sistema_Consecuencias_Completo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    
    with pd.ExcelWriter(filename, engine='xlsxwriter') as writer:
        # Hoja 1: Matriz de escalamiento
        escalation_matrix.to_excel(writer, sheet_name='Matriz_Escalamiento', index=False)
        
        # Hoja 2: Sistema de seguimiento
        tracking_system.to_excel(writer, sheet_name='Sistema_Seguimiento', index=False)
        
        # Hojas 3-6: Plantillas por nivel
        for nivel, template in templates.items():
            template_df = pd.DataFrame([template]).T
            template_df.columns = ['Campo']
            template_df.to_excel(writer, sheet_name=f'Plantilla_{nivel}')
        
        # Hoja 7: Registro de acciones (plantilla vac√≠a)
        registro_columns = [
            'ID_Accion', 'Fecha_Accion', 'Ruta', 'Conductor', 'Nivel_Consecuencia',
            'Tipo_Accion', 'Responsable_Ejecucion', 'Estado', 'Evidencia_Documento',
            'Fecha_Seguimiento', 'Observaciones'
        ]
        registro_df = pd.DataFrame(columns=registro_columns)
        registro_df.to_excel(writer, sheet_name='Registro_Acciones', index=False)
        
        # Formateo
        workbook = writer.book
        
        # Formato de encabezado
        header_format = workbook.add_format({
            'bold': True,
            'text_wrap': True,
            'valign': 'top',
            'fg_color': '#366092',
            'font_color': 'white',
            'border': 1
        })
        
        # Formato de alerta
        alert_format = workbook.add_format({
            'bg_color': '#FF6666',
            'font_color': 'white',
            'bold': True,
            'border': 1
        })
        
        # Aplicar formatos a todas las hojas
        for sheet_name in writer.sheets:
            worksheet = writer.sheets[sheet_name]
            worksheet.set_column('A:Z', 25)
    
    print(f"‚úÖ Sistema completo generado: {filename}")
    return filename

def create_monthly_report_template():
    """
    Crea plantilla para reportes mensuales de cumplimiento
    """
    report_data = {
        'Seccion': [
            'RESUMEN EJECUTIVO',
            'ESTAD√çSTICAS DEL MES',
            'RUTAS CON INCUMPLIMIENTOS',
            'ACCIONES DISCIPLINARIAS APLICADAS',
            'TENDENCIAS Y AN√ÅLISIS',
            'RECOMENDACIONES',
            'PLAN DE MEJORA'
        ],
        'Contenido': [
            'Porcentaje general de cumplimiento, rutas cr√≠ticas, acciones tomadas',
            'Total rutas, feedbacks realizados, incumplimientos por nivel',
            'Listado detallado de rutas que no cumplieron y sus historiales',
            'Acciones ejecutadas por nivel, documentaci√≥n generada',
            'Comparaci√≥n con meses anteriores, identificaci√≥n de patrones',
            'Propuestas de mejora, ajustes al proceso',
            'Acciones espec√≠ficas para el pr√≥ximo mes'
        ],
        'Responsable': [
            'Coordinador de Distribuci√≥n',
            'Coordinador de Distribuci√≥n',
            'Supervisor de Rutas',
            'Jefe de Distribuci√≥n',
            'Coordinador de Distribuci√≥n',
            'Jefe de Distribuci√≥n',
            'Gerente CD Soyapango'
        ],
        'Frecuencia': [
            'Mensual',
            'Mensual',
            'Mensual',
            'Mensual',
            'Mensual',
            'Mensual',
            'Mensual'
        ]
    }
    
    report_df = pd.DataFrame(report_data)
    
    # Guardar plantilla de reporte
    report_filename = f"Plantilla_Reporte_Mensual_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    report_df.to_excel(report_filename, index=False)
    
    print(f"‚úÖ Plantilla de reporte mensual: {report_filename}")
    return report_filename

def main():
    """
    Funci√≥n principal para generar todo el sistema de consecuencias
    """
    print("üéØ GENERANDO SISTEMA COMPLETO DE CONSECUENCIAS PARA FEEDBACKS")
    print("=" * 80)
    
    # Generar sistema completo
    system_file = generate_comprehensive_consequence_system()
    
    # Generar plantilla de reporte mensual
    report_template = create_monthly_report_template()
    
    print("\n" + "=" * 80)
    print("‚úÖ SISTEMA DE CONSECUENCIAS GENERADO EXITOSAMENTE")
    print(f"üìÅ Archivos del sistema:")
    print(f"   ‚Ä¢ {system_file}")
    print(f"   ‚Ä¢ {report_template}")
    
    print("\nüìã COMPONENTES DEL SISTEMA:")
    print("   1. Matriz de escalamiento por niveles")
    print("   2. Plantillas de documentos disciplinarios")
    print("   3. Sistema de seguimiento y tracking")
    print("   4. Registro de acciones tomadas")
    print("   5. Plantilla de reportes mensuales")
    
    print("\n‚ö° IMPLEMENTACI√ìN RECOMENDADA:")
    print("   1. Capacitar al equipo en el uso del sistema")
    print("   2. Establecer responsables por nivel")
    print("   3. Configurar alertas autom√°ticas")
    print("   4. Revisar mensualmente la efectividad")
    print("   5. Ajustar seg√∫n resultados obtenidos")

if __name__ == "__main__":
    main()
