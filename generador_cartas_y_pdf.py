import pandas as pd
from datetime import datetime, timedelta
import calendar
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
import os
import io

def load_headcount_data():
    """
    Carga la base de datos de HEADCOUNT para obtener nombres completos y supervisores
    """
    try:
        # Intentar cargar el archivo HEADCOUNT
        headcount_file = "BASE HEADCOUNT JUNIO - 2025.xlsm"
        headcount_df = pd.read_excel(headcount_file, engine='openpyxl')
        
        print(f"‚úÖ BASE HEADCOUNT cargada: {len(headcount_df)} empleados")
        
        # Mostrar las columnas disponibles para verificar
        print(f"üìã Columnas disponibles: {list(headcount_df.columns)}")
        
        return headcount_df
        
    except Exception as e:
        print(f"‚ùå Error cargando BASE HEADCOUNT: {e}")
        return None

def get_signatures_for_date():
    """Return current signatures"""
    return [
        {"name": "Roney Rivas", "title": "TL de Ventas"},
        {"name": "F√©lix Ch√°vez", "title": "Gerente CD Soyapango"},
        {"name": "√ìscar Portillo", "title": "Jefe de Distribuci√≥n"},
        {"name": "√ìscar Cuellar", "title": "Coordinador de Distribuci√≥n"}
    ]

def get_supervisor_info():
    """
    Retorna informaci√≥n de supervisores seg√∫n la jerarqu√≠a CORREGIDA
    """
    return {
        'supervisor_distribucion': {
            'nombre': 'Supervisor de Distribuci√≥n',
            'cargo': 'Supervisor de Distribuci√≥n'
        },
        'coordinador': {
            'nombre': '√ìscar Cuellar',
            'cargo': 'Coordinador de Distribuci√≥n'
        },
        'jefe': {
            'nombre': '√ìscar Portillo', 
            'cargo': 'Jefe de Distribuci√≥n'
        },
        'gerente': {
            'nombre': 'F√©lix Ch√°vez',
            'cargo': 'Gerente CD Soyapango'
        }
    }

def generar_flujo_consecuencias_con_cartas(mes=5, a√±o=2025):
    """
    Genera el flujo de consecuencias mensual con cartas PDF personalizadas
    """
    mes_nombre = calendar.month_name[mes]
    
    print(f"üìã GENERANDO FLUJO DE CONSECUENCIAS CON CARTAS PDF: {mes_nombre.upper()} {a√±o}")
    print("=" * 80)
    
    try:
        # Cargar datos principales
        feedbacks_df = pd.read_excel('Feedbacks H1.xlsx')
        headcount_df = load_headcount_data()
        
        if headcount_df is None:
            print("‚ö†Ô∏è Continuando sin base HEADCOUNT, usando datos disponibles")
        
        # Cargar base de rutas
        archivos_rutas = [
            f'BD_Rutas_{mes_nombre}.xlsx',
            'BD_Rutas_Junio.xlsx',
            'BD_Rutas_Mayo.xlsx', 
            'BD_Rutas.xlsx'
        ]
        
        rutas_df = None
        archivo_usado = None
        
        for archivo in archivos_rutas:
            try:
                rutas_df = pd.read_excel(archivo)
                archivo_usado = archivo
                print(f"‚úÖ Usando base de rutas: {archivo}")
                break
            except FileNotFoundError:
                continue
        
        if rutas_df is None:
            print("‚ùå No se encontr√≥ ninguna base de datos de rutas")
            return None
        
        # Convertir fechas
        feedbacks_df['fecha_registro'] = pd.to_datetime(feedbacks_df['fecha_registro'])
        
        # Filtrar feedbacks del mes espec√≠fico
        feedbacks_mes = feedbacks_df[
            (feedbacks_df['fecha_registro'].dt.month == mes) &
            (feedbacks_df['fecha_registro'].dt.year == a√±o)
        ]
        
        print(f"üìä Feedbacks encontrados en {mes_nombre} {a√±o}: {len(feedbacks_mes)}")
        
        # Obtener todas las rutas activas
        todas_las_rutas = set(rutas_df['RUTA'].dropna().unique())
        
        # Rutas que S√ç hicieron feedback
        rutas_con_feedback = set(feedbacks_mes['ruta'].dropna().unique())
        
        # Rutas que NO hicieron feedback (necesitan consecuencias)
        rutas_sin_feedback = todas_las_rutas - rutas_con_feedback
        
        print(f"üìà Total rutas activas: {len(todas_las_rutas)}")
        print(f"‚úÖ Rutas que cumplieron: {len(rutas_con_feedback)}")
        print(f"‚ùå Rutas que NO cumplieron: {len(rutas_sin_feedback)}")
        
        # Crear lista de rutas para consecuencias con datos completos
        rutas_consecuencias = []
        
        for ruta in sorted(rutas_sin_feedback):
            # Buscar informaci√≥n en la base de rutas
            info_ruta = rutas_df[rutas_df['RUTA'] == ruta]
            
            reparto_nombre = 'Reparto no identificado'
            supervisor_nombre = 'Supervisor no identificado'
            
            if not info_ruta.empty:
                # Intentar obtener el nombre del reparto de diferentes columnas posibles
                for col in ['NOMBRE_VENDEDOR', 'VENDEDOR', 'REPARTO', 'NOMBRE_REPARTO', 'NOMBRE']:
                    if col in info_ruta.columns and pd.notna(info_ruta[col].iloc[0]):
                        reparto_nombre = info_ruta[col].iloc[0]
                        break
                
                # Buscar en HEADCOUNT para obtener datos completos
                if headcount_df is not None:
                    # Buscar por nombre del reparto en HEADCOUNT
                    headcount_match = headcount_df[
                        headcount_df['NOMBRE COMPLETO'].str.contains(reparto_nombre, case=False, na=False)
                    ]
                    
                    if not headcount_match.empty:
                        reparto_nombre = headcount_match['NOMBRE COMPLETO'].iloc[0]
                        
                        # Obtener supervisor si existe la columna
                        for sup_col in ['POSICION - SUPERVISOR', 'SUPERVISOR', 'JEFE_INMEDIATO']:
                            if sup_col in headcount_match.columns and pd.notna(headcount_match[sup_col].iloc[0]):
                                supervisor_nombre = headcount_match[sup_col].iloc[0]
                                break
            
            rutas_consecuencias.append({
                'RUTA': ruta,
                'REPARTO': reparto_nombre,
                'SUPERVISOR': supervisor_nombre,
                'MES_INCUMPLIMIENTO': f'{mes_nombre} {a√±o}',
                'NIVEL_CONSECUENCIA': '',  # Para llenar manualmente
                'ACCION_REQUERIDA': '',    # Para llenar manualmente
                'RESPONSABLE': '',         # Para llenar manualmente
                'FECHA_LIMITE': '',        # Para llenar manualmente
                'FECHA_EJECUTADA': '',     # Para llenar al ejecutar
                'ESTADO': 'PENDIENTE',
                'OBSERVACIONES': '',
                'DOCUMENTO_EVIDENCIA': ''
            })
        
        # Crear DataFrame
        df_consecuencias = pd.DataFrame(rutas_consecuencias)
        
        # Crear hoja de gu√≠a r√°pida CORREGIDA
        guia_rapida = [
            {
                'NIVEL': 'NIVEL 1', 
                'ACCION': 'Llamada atenci√≥n verbal', 
                'RESPONSABLE': 'Supervisor de Distribuci√≥n', 
                'PLAZO': '2 d√≠as',
                'DESCRIPCION': 'Primera falta mensual'
            },
            {
                'NIVEL': 'NIVEL 2', 
                'ACCION': 'Amonestaci√≥n escrita', 
                'RESPONSABLE': 'Coordinador de Distribuci√≥n', 
                'PLAZO': '3 d√≠as',
                'DESCRIPCION': 'Segunda falta mensual'
            },
            {
                'NIVEL': 'NIVEL 3', 
                'ACCION': 'Suspensi√≥n 1 d√≠a', 
                'RESPONSABLE': 'Jefe de Distribuci√≥n', 
                'PLAZO': '5 d√≠as',
                'DESCRIPCION': 'Tercera falta mensual'
            },
            {
                'NIVEL': 'NIVEL 4', 
                'ACCION': 'Evaluaci√≥n disciplinaria', 
                'RESPONSABLE': 'Gerente CD Soyapango', 
                'PLAZO': '1 semana',
                'DESCRIPCION': 'Cuarta falta o m√°s'
            }
        ]
        
        df_guia = pd.DataFrame(guia_rapida)
        
        # Crear resumen estad√≠stico
        resumen = [{
            'MES': f'{mes_nombre} {a√±o}',
            'TOTAL_RUTAS': len(todas_las_rutas),
            'CUMPLIERON': len(rutas_con_feedback),
            'NO_CUMPLIERON': len(rutas_sin_feedback),
            'PORCENTAJE_CUMPLIMIENTO': round((len(rutas_con_feedback) / len(todas_las_rutas)) * 100, 1),
            'ARCHIVO_RUTAS_USADO': archivo_usado,
            'FECHA_GENERACION': datetime.now().strftime('%Y-%m-%d %H:%M')
        }]
        
        df_resumen = pd.DataFrame(resumen)
        
        # Generar archivo Excel
        excel_filename = f"Consecuencias_{mes_nombre}_{a√±o}_{datetime.now().strftime('%Y%m%d')}.xlsx"
        
        with pd.ExcelWriter(excel_filename, engine='xlsxwriter') as writer:
            # Hoja principal: Rutas para consecuencias
            df_consecuencias.to_excel(writer, sheet_name='RUTAS_CONSECUENCIAS', index=False)
            
            # Hoja de gu√≠a
            df_guia.to_excel(writer, sheet_name='GUIA_RAPIDA', index=False)
            
            # Hoja de resumen
            df_resumen.to_excel(writer, sheet_name='RESUMEN', index=False)
            
            # Formateo b√°sico
            workbook = writer.book
            
            # Formato de encabezado
            header_format = workbook.add_format({
                'bold': True,
                'bg_color': '#4F81BD',
                'font_color': 'white',
                'border': 1
            })
            
            # Aplicar formato a la hoja principal
            worksheet = writer.sheets['RUTAS_CONSECUENCIAS']
            
            # Ajustar anchos de columna
            worksheet.set_column('A:A', 12)  # RUTA
            worksheet.set_column('B:B', 25)  # REPARTO
            worksheet.set_column('C:C', 25)  # SUPERVISOR
            worksheet.set_column('D:L', 20)  # Resto de columnas
        
        print(f"‚úÖ Archivo Excel generado: {excel_filename}")
        
        # Generar cartas PDF para cada ruta
        if len(rutas_sin_feedback) > 0:
            generar_cartas_pdf(df_consecuencias, mes_nombre, a√±o)
        
        # Generar PDF del flujo completo
        generar_pdf_flujo_completo(df_guia, mes_nombre, a√±o, df_resumen)
        
        return excel_filename, len(rutas_sin_feedback)
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return None, 0
Se realiza llamada de atenci√≥n VERBAL al reparto sobre la importancia de cumplir con los feedbacks 
mensuales como parte fundamental de sus responsabilidades laborales.

COMPROMISO:
El reparto se compromete a:
- Realizar todos los feedbacks mensuales en tiempo y forma
- Comunicar cualquier impedimento que pueda afectar el cumplimiento
- Mantener al d√≠a sus reportes y documentaci√≥n requerida

CONSECUENCIAS:
Este es el PRIMER incumplimiento registrado. El pr√≥ximo incumplimiento resultar√° en amonestaci√≥n escrita 
que ser√° archivada en su expediente personal.

FIRMAS:

_____________________________          _____________________________
{vendedor}                             {supervisores['coordinador']['nombre']}
Conductor                     {supervisores['coordinador']['cargo']}

Fecha: _________________               Fecha: _________________

OBSERVACIONES:
_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________
"""
    return carta_content

def generate_carta_nivel2(ruta, vendedor, mes_a√±o, fecha_actual):
    """
    Genera carta para NIVEL 2 - Amonestaci√≥n Escrita
    """
    supervisores = get_supervisor_info()
    
    carta_content = f"""
AMONESTACI√ìN ESCRITA

Fecha: {fecha_actual}
Ruta: {ruta}
Conductor: {vendedor}

MOTIVO:
SEGUNDO incumplimiento en la realizaci√≥n del Feedback mensual correspondiente a {mes_a√±o}.

ANTECEDENTE:
El reparto ya recibi√≥ llamada de atenci√≥n verbal por incumplimiento previo en la realizaci√≥n 
de feedbacks mensuales.

DESCRIPCI√ìN:
El reparto de la ruta {ruta} ha incumplido por SEGUNDA vez con la realizaci√≥n del feedback 
mensual requerido durante el per√≠odo de {mes_a√±o}, demostrando falta de compromiso con los 
procedimientos establecidos.

ACCI√ìN DISCIPLINARIA:
Se emite AMONESTACI√ìN ESCRITA que ser√° archivada en el expediente personal del empleado.

ADVERTENCIA:
Esta amonestaci√≥n escrita constituye una medida disciplinaria formal. El reparto debe entender 
que su comportamiento laboral no est√° cumpliendo con los est√°ndares requeridos.

COMPROMISOS EXIGIDOS:
- Cumplimiento INMEDIATO y sostenido de todos los feedbacks mensuales
- Mejora en la responsabilidad y compromiso laboral
- Comunicaci√≥n proactiva con supervisi√≥n

CONSECUENCIAS:
El pr√≥ximo incumplimiento resultar√° en SUSPENSI√ìN DE UN D√çA SIN GOCE DE SUELDO.

FIRMAS:

_____________________________          _____________________________
{vendedor}                             {supervisores['coordinador']['nombre']}
Vendedor/Conductor                     {supervisores['coordinador']['cargo']}

Fecha: _________________               Fecha: _________________

COPIA PARA EXPEDIENTE PERSONAL: S√ç

OBSERVACIONES:
_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________
"""
    return carta_content

def generate_carta_nivel3(ruta, vendedor, mes_a√±o, fecha_actual):
    """
    Genera carta para NIVEL 3 - Suspensi√≥n
    """
    supervisores = get_supervisor_info()
    fecha_suspension = (datetime.strptime(fecha_actual, '%Y-%m-%d') + timedelta(days=3)).strftime('%Y-%m-%d')
    fecha_reintegro = (datetime.strptime(fecha_suspension, '%Y-%m-%d') + timedelta(days=1)).strftime('%Y-%m-%d')
    
    carta_content = f"""
ACTA DE SUSPENSI√ìN

Fecha: {fecha_actual}
Ruta: {ruta}
Vendedor/Conductor: {vendedor}

MOTIVO:
TERCER incumplimiento en la realizaci√≥n del Feedback mensual correspondiente a {mes_a√±o}.

HISTORIAL DISCIPLINARIO:
1. Primer incumplimiento: Llamada de atenci√≥n verbal
2. Segundo incumplimiento: Amonestaci√≥n escrita
3. Tercer incumplimiento: PRESENTE ACTA

DESCRIPCI√ìN:
El vendedor de la ruta {ruta} ha incumplido por TERCERA vez con la realizaci√≥n del feedback 
mensual, demostrando una actitud reincidente de incumplimiento a pesar de las medidas 
disciplinarias previas aplicadas.

MEDIDA DISCIPLINARIA:
SUSPENSI√ìN DE UN (1) D√çA SIN GOCE DE SUELDO

FECHAS:
- Fecha de suspensi√≥n: {fecha_suspension}
- Fecha de reintegro: {fecha_reintegro}

CONDICIONES DE REINTEGRO:
- Compromiso escrito de cumplimiento futuro
- Reuni√≥n con {supervisores['jefe']['nombre']} antes del reintegro
- Plan de mejora personalizado

ADVERTENCIA FINAL:
Cualquier incumplimiento adicional ser√° evaluado por el Gerente para determinar medidas 
disciplinarias m√°s severas, incluyendo posible evaluaci√≥n de continuidad laboral.

FIRMAS:

_____________________________          _____________________________
{vendedor}                             {supervisores['jefe']['nombre']}
Vendedor/Conductor                     {supervisores['jefe']['cargo']}

_____________________________          
{supervisores['coordinador']['nombre']}                             
{supervisores['coordinador']['cargo']}

Fecha: _________________               

COPIA PARA: Expediente personal, Coordinaci√≥n, Jefatura

OBSERVACIONES:
_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________
"""
    return carta_content

def generate_carta_nivel4(ruta, vendedor, mes_a√±o, fecha_actual):
    """
    Genera carta para NIVEL 4 - Evaluaci√≥n Gerencial
    """
    supervisores = get_supervisor_info()
    fecha_evaluacion = (datetime.strptime(fecha_actual, '%Y-%m-%d') + timedelta(days=5)).strftime('%Y-%m-%d')
    
    carta_content = f"""
CITACI√ìN PARA EVALUACI√ìN GERENCIAL

Fecha: {fecha_actual}
Ruta: {ruta}
Vendedor/Conductor: {vendedor}

MOTIVO:
CUARTO incumplimiento o m√°s en la realizaci√≥n de Feedbacks mensuales.

HISTORIAL DISCIPLINARIO:
1. Primer incumplimiento: Llamada de atenci√≥n verbal
2. Segundo incumplimiento: Amonestaci√≥n escrita  
3. Tercer incumplimiento: Suspensi√≥n 1 d√≠a
4. Incumplimientos adicionales: EVALUACI√ìN GERENCIAL

SITUACI√ìN ACTUAL:
El vendedor de la ruta {ruta} presenta un patr√≥n reincidente de incumplimiento en la realizaci√≥n 
de feedbacks mensuales, habiendo agotado las medidas disciplinarias progresivas sin mostrar 
mejora en su comportamiento laboral.

CITACI√ìN:
Se CITA al vendedor a reuni√≥n de evaluaci√≥n con Gerencia para determinar las medidas 
disciplinarias correspondientes seg√∫n la gravedad del caso.

FECHA DE EVALUACI√ìN: {fecha_evaluacion}
HORA: 8:00 AM
LUGAR: Oficina de Gerencia CD Soyapango

PARTICIPANTES DE LA EVALUACI√ìN:
- {supervisores['gerente']['nombre']} - {supervisores['gerente']['cargo']}
- {supervisores['jefe']['nombre']} - {supervisores['jefe']['cargo']}
- {supervisores['coordinador']['nombre']} - {supervisores['coordinador']['cargo']}
- {vendedor} - Vendedor/Conductor

OPCIONES A EVALUAR:
‚ñ° Suspensi√≥n extendida (3-5 d√≠as sin goce de sueldo)
‚ñ° Capacitaci√≥n obligatoria intensiva
‚ñ° Cambio de ruta con per√≠odo de prueba
‚ñ° Plan de mejora con seguimiento semanal
‚ñ° Otras medidas seg√∫n evaluaci√≥n gerencial

ADVERTENCIA:
La asistencia a esta evaluaci√≥n es OBLIGATORIA. La ausencia injustificada constituir√° 
falta grave adicional.

FIRMAS:

_____________________________          _____________________________
{vendedor}                             {supervisores['gerente']['nombre']}
Vendedor/Conductor                     {supervisores['gerente']['cargo']}

_____________________________          _____________________________
{supervisores['jefe']['nombre']}                             {supervisores['coordinador']['nombre']}
{supervisores['jefe']['cargo']}                              {supervisores['coordinador']['cargo']}

Fecha: _________________               

COPIA PARA: Expediente personal, Gerencia, Jefatura, Coordinaci√≥n

OBSERVACIONES:
_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________

RESULTADO DE LA EVALUACI√ìN (llenar despu√©s de la reuni√≥n):
_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________

DECISI√ìN FINAL: ___________________________________________________________

FIRMA GERENCIA: _________________________ FECHA: _____________________
"""
    return carta_content

def generate_cartas_for_routes():
    """
    Genera cartas para las rutas que necesitan consecuencias
    """
    print("üìã GENERANDO CARTAS DISCIPLINARIAS PARA RUTAS")
    print("=" * 60)
    
    try:
        # Cargar datos
        feedbacks_df = pd.read_excel('Feedbacks H1.xlsx')
        rutas_df = pd.read_excel('BD_Rutas_Mayo.xlsx')
        
        # Convertir fechas
        feedbacks_df['fecha_registro'] = pd.to_datetime(feedbacks_df['fecha_registro'])
        
        # Filtrar Mayo 2025
        mayo_feedbacks = feedbacks_df[
            (feedbacks_df['fecha_registro'].dt.month == 5) &
            (feedbacks_df['fecha_registro'].dt.year == 2025)
        ]
        
        # Identificar rutas sin feedback
        todas_las_rutas = set(rutas_df['RUTA'].dropna().unique())
        rutas_con_feedback = set(mayo_feedbacks['ruta'].dropna().unique())
        rutas_sin_feedback = todas_las_rutas - rutas_con_feedback
        
        print(f"üìä Rutas que necesitan cartas: {len(rutas_sin_feedback)}")
        
        # Crear directorio para cartas
        if not os.path.exists('Cartas_Disciplinarias'):
            os.makedirs('Cartas_Disciplinarias')
        
        cartas_generadas = []
        fecha_actual = datetime.now().strftime('%Y-%m-%d')
        
        for ruta in sorted(rutas_sin_feedback):
            # Buscar informaci√≥n del vendedor
            info_ruta = rutas_df[rutas_df['RUTA'] == ruta]
            vendedor = 'VENDEDOR NO IDENTIFICADO'
            
            if not info_ruta.empty and 'NOMBRE_VENDEDOR' in info_ruta.columns:
                vendedor = info_ruta['NOMBRE_VENDEDOR'].iloc[0]
            
            # Para este ejemplo, generar cartas de diferentes niveles
            # En la pr√°ctica, deber√≠as determinar el nivel seg√∫n el historial
            nivel = 1  # Por defecto NIVEL 1 para nuevos incumplimientos
            
            # Generar carta seg√∫n el nivel
            if nivel == 1:
                carta_content = generate_carta_nivel1(ruta, vendedor, "Mayo 2025", fecha_actual)
                nivel_nombre = "NIVEL1_Atencion_Verbal"
            elif nivel == 2:
                carta_content = generate_carta_nivel2(ruta, vendedor, "Mayo 2025", fecha_actual)
                nivel_nombre = "NIVEL2_Amonestacion_Escrita"
            elif nivel == 3:
                carta_content = generate_carta_nivel3(ruta, vendedor, "Mayo 2025", fecha_actual)
                nivel_nombre = "NIVEL3_Suspension"
            else:
                carta_content = generate_carta_nivel4(ruta, vendedor, "Mayo 2025", fecha_actual)
                nivel_nombre = "NIVEL4_Evaluacion_Gerencial"
            
            # Guardar carta
            filename = f"Cartas_Disciplinarias/Carta_{nivel_nombre}_Ruta_{ruta}_{fecha_actual.replace('-', '')}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(carta_content)
            
            cartas_generadas.append({
                'Ruta': ruta,
                'Vendedor': vendedor,
                'Nivel': nivel_nombre,
                'Archivo': filename
            })
            
            print(f"‚úÖ Carta generada: {ruta} - {vendedor} - {nivel_nombre}")
        
        # Crear resumen de cartas generadas
        resumen_df = pd.DataFrame(cartas_generadas)
        resumen_filename = f"Cartas_Disciplinarias/RESUMEN_Cartas_Generadas_{fecha_actual.replace('-', '')}.xlsx"
        resumen_df.to_excel(resumen_filename, index=False)
        
        print(f"\n‚úÖ Total cartas generadas: {len(cartas_generadas)}")
        print(f"üìÅ Directorio: Cartas_Disciplinarias/")
        print(f"üìä Resumen: {resumen_filename}")
        
        return cartas_generadas
        
    except Exception as e:
        print(f"‚ùå Error generando cartas: {e}")
        return []

def create_flow_explanation_pdf():
    """
    Crea un PDF explicativo del flujo de consecuencias
    """
    print("\nüìÑ GENERANDO PDF EXPLICATIVO DEL FLUJO")
    print("=" * 60)
    
    filename = f"FLUJO_CONSECUENCIAS_EXPLICATIVO_{datetime.now().strftime('%Y%m%d')}.pdf"
    doc = SimpleDocTemplate(filename, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []
    
    # T√≠tulo principal
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=1,  # Center
        textColor=colors.darkblue
    )
    
    story.append(Paragraph("FLUJO DE CONSECUENCIAS DISCIPLINARIAS", title_style))
    story.append(Paragraph("SISTEMA MENSUAL DE FEEDBACKS", title_style))
    story.append(Spacer(1, 20))
    
    # Introducci√≥n
    intro_style = ParagraphStyle(
        'Intro',
        parent=styles['Normal'],
        fontSize=12,
        spaceAfter=15,
        alignment=4  # Justify
    )
    
    intro_text = """
    Este documento establece el flujo de consecuencias disciplinarias para vendedores/conductores 
    que no cumplan con la realizaci√≥n de feedbacks mensuales. El sistema implementa medidas 
    progresivas que buscan corregir el comportamiento y asegurar el cumplimiento de los 
    procedimientos establecidos.
    """
    
    story.append(Paragraph(intro_text, intro_style))
    story.append(Spacer(1, 20))
    
    # Jerarqu√≠a de responsables
    story.append(Paragraph("JERARQU√çA DE RESPONSABLES", styles['Heading2']))
    
    jerarquia_data = [
        ['NIVEL', 'RESPONSABLE', 'CARGO'],
        ['1', '√ìscar Cuellar', 'Coordinador de Distribuci√≥n'],
        ['2', '√ìscar Cuellar', 'Coordinador de Distribuci√≥n'],
        ['3', '√ìscar Portillo', 'Jefe de Distribuci√≥n'],
        ['4', 'F√©lix Ch√°vez', 'Gerente CD Soyapango']
    ]
    
    jerarquia_table = Table(jerarquia_data, colWidths=[1*inch, 2.5*inch, 2.5*inch])
    jerarquia_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(jerarquia_table)
    story.append(Spacer(1, 20))
    
    # Niveles de consecuencias
    story.append(Paragraph("NIVELES DE CONSECUENCIAS", styles['Heading2']))
    
    # NIVEL 1
    story.append(Paragraph("NIVEL 1 - LLAMADA DE ATENCI√ìN VERBAL", styles['Heading3']))
    nivel1_text = """
    <b>Aplicaci√≥n:</b> Primer incumplimiento mensual<br/>
    <b>Responsable:</b> Coordinador de Distribuci√≥n<br/>
    <b>Plazo m√°ximo:</b> 48 horas desde detecci√≥n<br/>
    <b>Documentaci√≥n:</b> Constancia de llamada de atenci√≥n verbal<br/>
    <b>Archivo:</b> No se archiva en expediente<br/>
    <b>Consecuencia del pr√≥ximo incumplimiento:</b> Amonestaci√≥n escrita
    """
    story.append(Paragraph(nivel1_text, styles['Normal']))
    story.append(Spacer(1, 15))
    
    # NIVEL 2
    story.append(Paragraph("NIVEL 2 - AMONESTACI√ìN ESCRITA", styles['Heading3']))
    nivel2_text = """
    <b>Aplicaci√≥n:</b> Segundo incumplimiento mensual<br/>
    <b>Responsable:</b> Coordinador de Distribuci√≥n<br/>
    <b>Plazo m√°ximo:</b> 3 d√≠as desde detecci√≥n<br/>
    <b>Documentaci√≥n:</b> Amonestaci√≥n escrita formal<br/>
    <b>Archivo:</b> S√ç - Expediente personal<br/>
    <b>Consecuencia del pr√≥ximo incumplimiento:</b> Suspensi√≥n de 1 d√≠a
    """
    story.append(Paragraph(nivel2_text, styles['Normal']))
    story.append(Spacer(1, 15))
    
    # NIVEL 3
    story.append(Paragraph("NIVEL 3 - SUSPENSI√ìN", styles['Heading3']))
    nivel3_text = """
    <b>Aplicaci√≥n:</b> Tercer incumplimiento mensual<br/>
    <b>Responsable:</b> Jefe de Distribuci√≥n<br/>
    <b>Plazo m√°ximo:</b> 5 d√≠as desde detecci√≥n<br/>
    <b>Documentaci√≥n:</b> Acta de suspensi√≥n<br/>
    <b>Archivo:</b> S√ç - Expediente personal + Jefatura<br/>
    <b>Sanci√≥n:</b> 1 d√≠a sin goce de sueldo<br/>
    <b>Consecuencia del pr√≥ximo incumplimiento:</b> Evaluaci√≥n gerencial
    """
    story.append(Paragraph(nivel3_text, styles['Normal']))
    story.append(Spacer(1, 15))
    
    # NIVEL 4
    story.append(Paragraph("NIVEL 4 - EVALUACI√ìN GERENCIAL", styles['Heading3']))
    nivel4_text = """
    <b>Aplicaci√≥n:</b> Cuarto incumplimiento o m√°s<br/>
    <b>Responsable:</b> Gerente CD Soyapango + Comit√©<br/>
    <b>Plazo m√°ximo:</b> 1 semana desde detecci√≥n<br/>
    <b>Documentaci√≥n:</b> Citaci√≥n y acta de evaluaci√≥n<br/>
    <b>Archivo:</b> S√ç - Todos los niveles organizacionales<br/>
    <b>Opciones de sanci√≥n:</b> Suspensi√≥n extendida, capacitaci√≥n obligatoria, 
    cambio de ruta, o medidas seg√∫n evaluaci√≥n
    """
    story.append(Paragraph(nivel4_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Proceso mensual
    story.append(Paragraph("PROCESO MENSUAL", styles['Heading2']))
    
    proceso_data = [
        ['PASO', 'ACTIVIDAD', 'RESPONSABLE', 'PLAZO'],
        ['1', 'Identificar rutas sin feedback', 'Coordinador', 'D√≠a 1 del mes siguiente'],
        ['2', 'Generar cartas disciplinarias', 'Coordinador', 'D√≠a 2'],
        ['3', 'Notificar a vendedores', 'Coordinador/Jefe', 'D√≠a 3'],
        ['4', 'Ejecutar consecuencias', 'Seg√∫n nivel', 'M√°ximo d√≠a 8'],
        ['5', 'Documentar en expedientes', 'Coordinador', 'D√≠a 10'],
        ['6', 'Seguimiento y monitoreo', 'Jefe/Gerente', 'Continuo']
    ]
    
    proceso_table = Table(proceso_data, colWidths=[0.8*inch, 2.2*inch, 1.5*inch, 1.5*inch])
    proceso_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(proceso_table)
    story.append(Spacer(1, 20))
    
    # Notas importantes
    story.append(Paragraph("NOTAS IMPORTANTES", styles['Heading2']))
    
    notas_text = """
    ‚Ä¢ Este sistema es de aplicaci√≥n MENSUAL, no semanal o quincenal<br/>
    ‚Ä¢ Cada incumplimiento debe ser documentado apropiadamente<br/>
    ‚Ä¢ Los plazos son m√°ximos y deben respetarse estrictamente<br/>
    ‚Ä¢ El sistema busca la correcci√≥n, no la sanci√≥n excesiva<br/>
    ‚Ä¢ Recursos Humanos NO participa en este proceso disciplinario<br/>
    ‚Ä¢ Mantener confidencialidad en el manejo de expedientes<br/>
    ‚Ä¢ Revisar efectividad del sistema trimestralmente
    """
    
    story.append(Paragraph(notas_text, styles['Normal']))
    story.append(Spacer(1, 30))
    
    # Footer
    footer_text = f"""
    <b>Documento generado:</b> {datetime.now().strftime('%d de %B de %Y')}<br/>
    <b>Sistema:</b> Flujo de Consecuencias Mensual v1.0<br/>
    <b>Vigencia:</b> A partir de la fecha de implementaci√≥n
    """
    
    story.append(Paragraph(footer_text, styles['Normal']))
    
    # Construir PDF
    doc.build(story)
    
    print(f"‚úÖ PDF generado: {filename}")
    return filename

def main():
    """
    Funci√≥n principal para generar cartas y PDF explicativo
    """
    print("üéØ GENERADOR DE CARTAS DISCIPLINARIAS Y PDF EXPLICATIVO")
    print("=" * 70)
    
    # Generar cartas para rutas
    cartas = generate_cartas_for_routes()
    
    # Generar PDF explicativo
    pdf_file = create_flow_explanation_pdf()
    
    print("\n" + "=" * 70)
    print("‚úÖ PROCESO COMPLETADO")
    print(f"üìÅ Cartas generadas: {len(cartas)}")
    print(f"üìÑ PDF explicativo: {pdf_file}")
    print(f"üìÇ Directorio cartas: Cartas_Disciplinarias/")
    
    print(f"\nüìã ARCHIVOS LISTOS PARA USAR:")
    print(f"   ‚Ä¢ Cartas individuales por ruta y nivel")
    print(f"   ‚Ä¢ PDF explicativo completo del sistema")
    print(f"   ‚Ä¢ Resumen Excel de cartas generadas")
    
    print(f"\n‚ö° PR√ìXIMOS PASOS:")
    print(f"   1. Revisar cartas generadas en el directorio")
    print(f"   2. Imprimir cartas seg√∫n el nivel correspondiente")
    print(f"   3. Aplicar las medidas disciplinarias")
    print(f"   4. Documentar la ejecuci√≥n en el sistema")

if __name__ == "__main__":
    main()
